Addi	R2, #1
01010011


Addi	R1, #1
01001011


Addi	R2, 1
01010011




Add 	$2, $2		;R2 = 2
00110101
Add 	$2, $2
00110101
Add 	$2, $2		;R2 = 8
00110101
Add 	$2, $2
00110101
Add	$3, $2		;R3 = (R2 = 16)**
00111100
Add	$3, $3		;R3 = 32
00111111
Add	$3, $2		;R3 = 48
00111100
Addi	$3, 1
01011010
Addi	$3, 1		;R3 = 50
01011010
Add	$3, $3		;(R3 = 100)**
00111111


ResetPtr $5
11101110

Store 	$2, [$5

]	;MEM[0] = 16, used to calculate BMS and to reset loopCtr
11110000
AddPtr	$5, 1
11100010



Store 	$3, [$5]	;MEM[1] = 100 = arrayCtr
11110101




AddPtr	$6, 1
11100111

AddPtr	$6, 1
11100111
AddPtr 	$6, 1
11100111
AddPtr 	$6, 1
11100111
AddPtr 	$6, 1
11100111
AddPtr 	$6, 1
11100111
AddPtr 	$6, 1
11100111
AddPtr 	$6, 1		;R6 = 8, and MEM[8] = Pattern_Array[1] initialization
11100111






SLT	$0, $2
10000100
B	7
00001111

ResetPtr $5
11101110

AddPtr	$5, 1
11100010
AddPtr	$5, 1
11100010
AddPtr	$5, 1
11100010
AddPtr	$5, 1
11100010
SLT $0, $0
10000001
B 7
00001111
B-7
00010010
AddPtr	$5, 1 	;R5 = 5, MEM[5] = BMC
11100010
Addi	$2, 0	;reset R2 to 0
01010000
Addi	$2, 1	;R2 = 1
01010011
Store	$2, [$5];when BMS is updated, BMC must be reset to 1
11110000


;branch forward to skip the BMS check?



ResetPtr $5
11101110

Load	$2, [$5]	;R2 = 16
11111001
AddPtr	$5, 1
11100010
SLT $0, $0
10000001
B 7
00001111
B -6
00010100
B -6
00010100
AddPtr	$5, 1		;R5 = 2
11100010
Load	$3, [$5]	;R2 = MEM[2] = mismatchCtr
11111100
Sub	$2, $3		;R2 = 16 - mismatchCtr = Current Match Score, CMS
01110111
SLT $0, $0
10000001
B 3
00000110
B -7
00010010
B -7
00010010
B 7
00001111
AddPtr 	$5, 1
11100010
AddPtr 	$5, 1		;R5 = 4
11100010
Load 	$3, [$5]	;R3 = MEM[4] = Best Matching Score, BMS
11111100
SLT	$3, $2		;when BMS < CMS, R7 = 1
10011100
B 	-7		;go upwards to update BMS
00010010
B 	-7
00010010
B 5
00001010




Sub	$2, $3		;R2 = CMS - BMS
01110111
SLT	$2, $0		;if result is negative, branch forward
10010000
B 7
00001111
B -5
00010111
B 7
00001111

			;if result is zero, increment BMC (R2 cannot be positive because we established that BMS > CMS in the SLT above)

AddPtr	$5, 1;		;R5 = 5
11100010
Load 	$2, [$5]	;R2 = Best Match Counter
11111001
Addi	$2, 1		;BMC++
01010011
Store	$2, [$5]
11110000
SLT	$0, $0
10000001
B 	-7
00010010





ResetPtr $5		;R5 = 0
11101110
Load	$3, [$5}
11111100
]	;R3 = 16

Add	$4, $3		;R4 = 16 = loopCtr
00100111
AddPtr	$5, 1
11100010
SLT	$0, $0
10000001
B 	-6
00010100
B 	-6
00010100
Load	$3, [$5]
11111100


Addi	$3, -1		;MEM[1]-- = arrayCtr--
01011111
Store	$3, [$5]
11110101

AddPtr	$5, 1
11100010
Addi	$2, 0		;reset R2 to 0
01010000
SLT	$0, $0
10000001
B 	-8
00010001
B 	-8
00010001

Store	$2, [$5

]	;reset mismatchCtr : MEM[2] = R2 = 0
11110000
Addi 	$1, 1		;(re)initialize the bitChecker
01001010


Addi	$4, -1		;loopCtr--
01000111
SLT	$4, $0		;set branch flag when all bits have been checked
10011001
B	-6
00010100

Load 	$2, [$5

]	;R2 = Target Pattern
11111001
SLT	$0, $0
10000001
B 	-8
00010001

Load 	$3, [$6]	;R3 = Pattern_Array[i], where i = ($6-8)
11111111
XOR 	$3, $2		;compare P_A with T
10111101
AND 	$3, $1		;AND with bitChecker yields result in R3
11011011
SLT 	$0, $3		;R7 = 1 if there is a mismatch
10000111
B 	4 *****
00001001
Addi 	$1, $1		;bitChecker LSL 1
01001011
SLT 	$0, $2		;force branch condition R7 = 1
10000100
B	-8 *****
00010001


Add	$1, $1		;bitChecker LSL 1
00101011
AddPtr	$5, -1
11100000
Load	$3, [$5]
11111100

Addi	$3, 1		;MEM[2]++ (mismatch Counter)
01011010
Store	$3, [$5]
11110101
AddPtr	$5, 1
11100010

SLT	$0, $2		;force branch condition
10000100
B	-8
00010001