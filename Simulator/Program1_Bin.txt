Addptr R6, 1
11100110

Addptr R6, 1
11100110

Addptr R6, 1  ;This makes R6 into 3 which will be where we store a counter value
11100110

Addi R3, 1
01011010

Add R3, R3  ; R3 == 2
00111110

Add R3, R3  ; R3 == 4
00111110

Add R3, R3  ; R3 == 8
00111110

Add R3, R3  ; R3 == 16
00111110

Addi R3, #-1  ;R3 == 15
01011110

Store R3, [R6]
11110110
AddPtr R6, -1
11100100

Addi R2, 1
01001011


Addi R2, 1
01010011

Addi R2, 1
01010011

Add R2, R2  ;R2 == 6
00110101



Addptr $5, 1
11100010
Addptr $5, 1
11100010
Addptr $5, 1
11100010

LOAD $3, [$6]
11111111

SLT $2, $3
10010110

B #4
00001000

SUB $2, $3
01110110

SLT $0, $3
10000110

B #5
00001010

SLT $0, $0
10000001

Store R2, [R5]
11110000

AddPtr R5, #1		;Moves down the array
11100010


;This next block calculates the next value that we need to mod to get a "mod value" to store in the array

Addi R1, #0
01001000
Add R3, R2		;R3 = R2, and R3 will be used as a counter again, although this is a different value and will not need to be stored in memory
00111100
B #-6			;Linked branch, set 1
00010100
Addi R3, #-2		;We need to decrement it by 2 though due to 5 * 5 only having 4 plus signs and how our SLT works
01011100
Add R1, R2		;R1 is acting as an intermediate here; it's the number that we're going to repeatedly add to do our multiplication
00101101
Add R2, R1
00110011

Addi R3, #-1		;Decrement counterB
01011110
SLT R0, R3		;Branches if R3 >= 0
10001101
B #-3
00011011

AddPtr R6, #1		;R6 == 2 since counter is at Mem[2]
11100111
B #-8			;linked branch, set 1
00010001
Load R3, [R6]
11111111
Addi R3, #-1		;decrement counterA
01011111
Store R3, [R6]
11110110
AddPtr R6, #-1		;R6 == 1
11100100
SLT R3, R0		;Branches out if counterA < 0
10011001
B #3
00000110
SLT R0, R2 		;This happens when R3 < 0
10000100
B #-8 			;Repeat the mod process; linked branch, set 1
00010001


;Clean slate!!!

Addi R1, #0
01001000


Addi R2, #0
01010000
Addi R2, #1
01010011


Addi R4, #0	;I should have used R4 earlier as my counter
01000001
Addi R4, #1
01000010
Add R4, R4	;R4 == 2
00100001
Add R4, R4	;R4 == 4
00100001
Add R4, R4	;R4 == 8
00100001

Add R4, R4	;R4 == 16
00100001

Addi R4, #-1 ;R4 == 15
01000111



ResetPtr R5
11101001
ResetPtr R6
11101101
AddPtr R5, #1
11100010

AddPtr R5, #1	;R5 == 3
11100010


;This block of code will process P to see which bits of its binary representation is a 1, later blocks will multiplies the values as necessary

Load R3, [R6]	;R3 == P
11111111
AddPtr R6, #1
11100110
AddPtr R6, #1	;R6 == 2
11100110
Load R2, [R6]
11111010
B #-4		;linked branch set 2
00011000
And R3, R2
11011101
Addi R3, #-1 	;This is needed to make this SLT logic work out, otherwise, R2 always >= 0
01011111
Addi R4, #-1
01000010
AddPtr R5, #1
11100010

Add R2, R2	;"left shift" R2
00110101

SLT R3, R0
10011001
B #-7	;R3 == 0 before I did the subtraction, thus there was a 0 at this digit; linked branch set 2
00010010


;Note the value in R1 should be the result of all the multiplication that we need to do

;Its value will need to be shifted back into one of the registers that have access to memory after everything is said and done

;This had to happen though in order to preserve some of the values that would be used.

;Stores the bitchecker value

Store R2, [R6]
11110011
ResetPtr R6
11101101
Addi R2, #0
01010000


B #-4  		;Linked branch set 3, although this is going to be linked to set 2 from this point above
00011000
Load R3, [R5]
11111100

SLT R0, R1 	;This will only evaluate to false during the first run that we found a 1
10000010
B #4
00001001
Add R1, R3	;This is initializing R1 since it should be zero when this line executes
00101110
SLT R1, R0	;force branch back to the up to start of checking digits
10001000
B #-6		;Linked branch set 3
00010100
;Start of the repeated addition loop

Add R2, R1
00110011

Addi R3, #-2
01011100
B #-3		;Linked branch set 4, although it will be linked to branch set 3 from now on
00011011
Add R1, R2
00101101
Addi R3, #-1
01011111
SLT R0, R3
10000111
B #-3
00011011
SLT R4, R0		;branch out when R4 is negative
10011001
B 3
00000110
SLT R0, R1
10000010
B #-8 		;Linked branch set 4
00010001


Addi R2, #0
01010000

Add R2, R1
00110011

Addi R1, #0
01001000
ResetPtr R5
11101011
AddPtr R5, #1
11100010
Load R3, [R5]
11111100
AddPtr R5, #1
11100010
SLT R2, R3
10010110
B #4		 	;exits when R2 < Q
00001001
Sub R2, R3
01110111
SLT R0, R3		;Essentially a force branch
10000111
B #-4			;Branch for the mod, and it's being used as part of Linked branch, set 1
00011000
Store R2, [R5]		;So...R2 should be the value that I'm looking for now...and R2 == 2
11110011
B #0			;stall branch
00000000